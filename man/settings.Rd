% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/settings.R
\name{settings}
\alias{settings}
\title{Settings}
\usage{
settings(..., project = NULL)
}
\description{
Define project-local settings that can be used to adjust the behavior of
\code{renv} with your particular project.
}
\section{Settings}{


\describe{

\item{\code{ignored.packages}}{

A vector of packages, which should be ignored when attempting to snapshot
the project's private library. Note that if a package has already been
added to the lockfile, that entry in the lockfile will not be ignored. \cr

}

\item{\code{external.libraries}}{

A vector of library paths, to be used in addition to the project's own
private library. This can be useful if you have a package available for use
in some global library, but for some reason \code{renv} is not able to install
that package (e.g. sources or binaries for that package are not publicly
available, or you have been unable to orchestrate the pre-requisites for
installing some packages from source on your machine).

}

\item{\code{use.cache}}{

Use a global cache of \R packages. When active, \code{renv} will install
packages into a global cache, and link packages from the cache into your
\code{renv} projects as appropriate. This can greatly save on disk space
and install time when for \R packages which are used across multiple
projects in the same environment.

}

\item{\code{auto.snapshot}}{

Automatically snapshot changes to a project's private library after
installing a package with \code{\link[=install]{install()}}.

}

\item{\code{python}}{

The path to a Python binary, to be used by e.g. \code{reticulate} for projects
requiring the use of Python. Alternatively, if set to \code{TRUE}, then \code{renv}
will create a project-local Python virtual environment and use that.
In that case, \code{renv} will use whichever version of Python is currently
in use by \code{reticulate} (if any), or the version of Python requested by
\code{RETICULATE_PYTHON} otherwise.

}

}
}

\examples{
\dontrun{

# check the 'ignored.packages' option
renv::settings$ignored.packages()

# ignore the 'tidyverse' package in this project
renv::settings$ignored.packages("tidyverse")

}
}
